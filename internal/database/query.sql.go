// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"
)

const getUserById = `-- name: GetUserById :one
select
    id_user,
    username,
    email,
    created_on,
    last_login
from
    users
where
    id_user = $1 limit 1
`

func (q *Queries) GetUserById(ctx context.Context, idUser int32) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, idUser)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.Username,
		&i.Email,
		&i.CreatedOn,
		&i.LastLogin,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select
    id_user,
    username,
    email,
    created_on,
    last_login
from
    users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.IDUser,
			&i.Username,
			&i.Email,
			&i.CreatedOn,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
