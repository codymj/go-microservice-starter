// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"
)

const getUsers = `-- name: GetUsers :many
select
    ` + "`" + `id_user` + "`" + `,
    ` + "`" + `username` + "`" + `,
    ` + "`" + `email` + "`" + `,
    ` + "`" + `created_on` + "`" + `,
    ` + "`" + `last_login` + "`" + `
from
    users
`

type GetUsersRow struct {
	Column1 interface{} `json:"column1"`
	Column2 interface{} `json:"column2"`
	Column3 interface{} `json:"column3"`
	Column4 interface{} `json:"column4"`
	Column5 interface{} `json:"column5"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.Column1,
			&i.Column2,
			&i.Column3,
			&i.Column4,
			&i.Column5,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
